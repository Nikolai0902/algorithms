package algorithms.job4j.greedyalgorithm;

/**
 *
 * 2 задача.
 *
 * Жадный алгоритм.
 *
 * Чтобы рассмотреть данный алгоритм,
 * выберем довольно распространенную задачу — о рюкзаке.
 * Эта задача наиболее точно показывает суть жадного алгоритма.
 *
 * Вы вломились ночью в магазин с рюкзаком,
 * и перед вами множество товаров, которые вы можете украсть.
 * Но при этом вместимость рюкзака ограничена — не более 30 условных единиц.
 * В тоже время вы хотите унести набор товаров максимальной стоимости,
 * которые только влезут в рюкзак.
 *
 * Как вы определите, что положить?
 *
 * Итак, жадный алгоритм для задачи о рюкзаке состоит в следующих шагах
 * (считаем, что все предметы помещаются в рюкзак):
 *
 *     Выбрать максимально дорогой предмет из еще не затронутых.
 *     Если он помещается в рюкзак, положить его туда, если нет — пропускаем.
 *     Все предметы перебрали? Если нет — возвращаемся к 1 пункту,
 *     если да — бежим из магазина, так как наша цель тут выполнена.
 *
 * Временная сложность данного алгоритма — O(N).
 *
 */
public class Bag {

/*    public static void fillBackpack(Bag bag, List<Item> items) {
        for (Item item : items) {
            if(bag.getMaxWeight() > bag.getCurrentWeight() + item.getWeight()) {
                bag.addItem(item);
            }
        }
    }

Но является ли это лучшим решением? Вам не кажется, что можно немного модернизировать
наше решение,
чтобы можно было укомплектовать рюкзак с более высокой суммарной стоимостью?
Давайте взглянем, как это можно сделать:

public static void effectiveFillBackpack(Bag bag, List<Item> items) {
   Map<Double, Item> sortByRatio = new TreeMap(Collections.reverseOrder());
   for (Item item : items) {
       sortByRatio.put((double)item.getCost() / item.getWeight(), item);
   }

   for (Map.Entry<Double, Item> entry : sortByRatio.entrySet()) {
       if(bag.getMaxWeight() > bag.getCurrentWeight() + entry.getValue().getWeight()) {
           bag.addItem(entry.getValue());
       }
   }
}

Тут мы в первую очередь вычисляем соотношение веса и цены для каждого предмета.
Так сказать, сколько стоит одна единица данного предмета.
И уже по этим значениям мы сортируем наши предметы и добавляем в нашу сумку.

*/

}
