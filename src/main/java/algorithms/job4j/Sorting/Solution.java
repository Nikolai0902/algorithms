package algorithms.job4j.Sorting;

import java.util.Arrays;

/**
 * Нам необходимо найти самое большое количество пропущенных чисел между двумя другими числами,
 * которые идут последовательно.
 *
 * Например, задан массив [3, 6, 10, 1].
 * Вначале нужно отсортировать массив [1, 3, 6, 10].
 * Далее находим разницу между числами
 * в последовательности 3 - 1 = 2, 6 - 3 = 3, 10 - 6 = 4.
 * Самое большое количество пропущенных чисел равно 4.
 *
 * Алгоритмическое решение этого задания равно O(n log(n)), то есть оно сводится к времени сортировки.
 * Эту задачу так же можно решить за линейное время используя Hash таблицы.
 *
 * Пространственная сложность: Сложность алгоритма по пространству в основном определяется
 * дополнительными структурами данных. Если сортировка выполняется
 * "на месте" (например, с использованием алгоритма быстрой сортировки),
 * то дополнительная память может не потребоваться, и пространственная сложность будет O(1).
 * Однако, если сортировка требует дополнительной памяти
 * (например, при использовании сортировки слиянием),
 * то пространственная сложность будет O(n).
 *
 */
public class Solution {

    public static int maximumGap(int[] nums) {
        Arrays.sort(nums);
        int maxGap = 0;
        for (int i = 1; i < nums.length; i++) {
            maxGap = Math.max(maxGap, nums[i] - nums[i - 1]);
        }
        return maxGap;
    }

    public static void main(String[] args) {
        int[] num = {3, 6, 10, 1};
        System.out.println(maximumGap(num));
    }
}
